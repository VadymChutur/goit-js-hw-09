{"mappings":"gfAAA,I,EAAAA,EAAA,SAAMC,OAEAC,EAAO,CACXC,eAAgBC,SAASC,cAAc,UAGnCC,EAAY,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAC7BC,EAAOC,QAAQ,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,OAC3DI,QAAMC,IAAI,uBAAwCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,EAGtDM,EAAU,SAAAR,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAC3BC,EAAOM,QAAQ,sBAAuCJ,OAAfJ,EAAS,QAAYI,OAANH,EAAM,OAC1DI,QAAMC,IAAI,sBAAqCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,EAwBzD,SAASQ,EAAcT,EAAUC,GAC/B,IAAMS,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEd,WAAUC,UAEpBc,EAAO,CAAEf,WAAUC,S,GAEpBA,E,IA9BPP,EAAKC,eAAesB,iBAAiB,UAErC,SAAyBC,GACvBA,EAAEC,iBACF,IAAInB,EAAW,EACiBoB,EAAAF,EAAEG,OAA1BpB,EAAwBmB,EAAxBnB,MAAOqB,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OACjBC,EAAcC,OAAOxB,EAAMyB,OACzBC,EAAaF,OAAOH,EAAKI,OACzBE,EAAkBH,OAAOF,EAAOG,OAEtCxB,EAAO2B,KAAK,iCAAkC,CAC5CC,QAAS,MAGX,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAiBG,GAAK,EAGxCtB,EAFAT,GAAY,EACZwB,GAAeG,GACsBK,KAAKlC,GAAWmC,MAAM1B,E","sources":["src/js/03-promises.js"],"sourcesContent":["const { Notify } = require('notiflix');\n\nconst refs = {\n  promiseFormRef: document.querySelector('.form'),\n};\n\nconst onSuccess = ({ position, delay }) => {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n};\n\nconst onError = ({ position, delay }) => {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n};\n\nrefs.promiseFormRef.addEventListener('submit', startPromiseGen);\n\nfunction startPromiseGen(e) {\n  e.preventDefault();\n  let position = 0;\n  const { delay, step, amount } = e.target;\n  let FIRST_DELAY = Number(delay.value);\n  const STEP_DEALY = Number(step.value);\n  const NUMBER_OF_STEPS = Number(amount.value);\n\n  Notify.info('Launch of the bid generator :)', {\n    timeout: 1000,\n  });\n\n  for (let i = 0; i < NUMBER_OF_STEPS; i += 1) {\n    position += 1;\n    FIRST_DELAY += STEP_DEALY;\n    createPromise(position, FIRST_DELAY).then(onSuccess).catch(onError);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["parcelRequire","Notify","$ce04d3a99e08e73b$var$refs","promiseFormRef","document","querySelector","$ce04d3a99e08e73b$var$onSuccess","param","position","delay","$ce04d3a99e08e73b$require$Notify","success","concat","console","log","$ce04d3a99e08e73b$var$onError","failure","$ce04d3a99e08e73b$var$createPromise","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","_target","target","step","amount","FIRST_DELAY","Number","value","STEP_DEALY","NUMBER_OF_STEPS","info","timeout","i","then","catch"],"version":3,"file":"03-promises.5f293fea.js.map"}