{"mappings":"oeAAA,I,EAAAA,EAAA,SAAMC,OAEN,MAAMC,EAAO,CACXC,eAAgBC,SAASC,cAAc,UAGnCC,EAAY,EAACC,SAAEA,EAAQC,MAAEA,MAC7BC,EAAOC,QAAQ,uBAAqBH,QAAiBC,OACnDG,QAAMC,IAAI,uBAAqBL,QAAiBC,MAAU,EAGxDK,EAAU,EAACN,SAAEA,EAAQC,MAAEA,MAC3BC,EAAOK,QAAQ,sBAAoBP,QAAiBC,OAClDG,QAAMC,IAAI,sBAAoBL,QAAeC,MAAU,EAwB3D,SAASO,EAAcR,EAAUC,GAC/B,MAAMQ,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEb,E,MAAUC,IAEpBa,EAAO,C,SAAEd,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA9BbN,EAAKC,eAAeoB,iBAAiB,UAErC,SAAyBC,GACvBA,EAAEC,iBACF,IAAIlB,EAAW,EACf,MAAMC,MAAEA,EAAKkB,KAAEA,EAAIC,OAAEA,GAAWH,EAAEI,OAClC,IAAIC,EAAcC,OAAOtB,EAAMuB,OAC/B,MAAMC,EAAaF,OAAOJ,EAAKK,OACzBE,EAAkBH,OAAOH,EAAOI,OAEtCtB,EAAOyB,KAAK,iCAAkC,CAC5CC,QAAS,MAGX,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAiBG,GAAK,EACxC7B,GAAY,EACZsB,GAAeG,EACfjB,EAAcR,EAAUsB,GAAaQ,KAAK/B,GAAWgC,MAAMzB,E","sources":["src/js/03-promises.js"],"sourcesContent":["const { Notify } = require('notiflix');\n\nconst refs = {\n  promiseFormRef: document.querySelector('.form'),\n};\n\nconst onSuccess = ({ position, delay }) => {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n};\n\nconst onError = ({ position, delay }) => {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n};\n\nrefs.promiseFormRef.addEventListener('submit', startPromiseGen);\n\nfunction startPromiseGen(e) {\n  e.preventDefault();\n  let position = 0;\n  const { delay, step, amount } = e.target;\n  let FIRST_DELAY = Number(delay.value);\n  const STEP_DEALY = Number(step.value);\n  const NUMBER_OF_STEPS = Number(amount.value);\n\n  Notify.info('Launch of the bid generator :)', {\n    timeout: 1000,\n  });\n\n  for (let i = 0; i < NUMBER_OF_STEPS; i += 1) {\n    position += 1;\n    FIRST_DELAY += STEP_DEALY;\n    createPromise(position, FIRST_DELAY).then(onSuccess).catch(onError);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["parcelRequire","Notify","$47d4ff9957288465$var$refs","promiseFormRef","document","querySelector","$47d4ff9957288465$var$onSuccess","position","delay","$47d4ff9957288465$require$Notify","success","console","log","$47d4ff9957288465$var$onError","failure","$47d4ff9957288465$var$createPromise","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","step","amount","target","FIRST_DELAY","Number","value","STEP_DEALY","NUMBER_OF_STEPS","info","timeout","i","then","catch"],"version":3,"file":"03-promises.52a5c7e5.js.map"}